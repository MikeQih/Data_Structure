#include <stdio.h>
int main(int argc, char const *argv[])
{
    /*
    递归
    缺点：太多层递归可能会导致栈溢出，可能包含很多重复计算
    */

    /*
    队列应用--树的层次遍历
    队列在操作系统中的应用：多个进程争抢着使用有限的系统资源时，FCFS(First Come First Service，先来先服务)是一种常用策略
    */

    int a[2][4];//2行4列的二维数组 两种存储策略：行优先和列优先
    a[0][0] = 1;
    printf("%d\n",a[0][0]);
    return 0;
    /*
    M行N列的二维数组b[M][N]中，
    若按行优先存储，则b[i][j]的存储地址=LOC(起始地址)+(i*N+j)*(sizeof(ElemType))
    按列优先存储，则b[i][j]地址=LOC+(j*M+i)*(sizeof(ElemType))
    */

    /*
    描述矩阵元素时，行/列号通常从1开始，而描述数组时通常下标从0开始
    特殊矩阵：对称矩阵，三角矩阵，三对角矩阵（这三个都是方阵 nxm,n等于m, ai,j=aj,i 对称矩阵），稀疏矩阵
    普通存储：n*n二维数组
    压缩存储策略：只存储主对角线+下三角区(上三角区也可)
    key：行优先的原则，ai,j是第 (i*(i-1))/2+j 个元素；数组下标k，ai,j->B[k]，k=(i*(i-1))/2+j-1

    访问上三角区时 ai,j=aj,i k=(j*(j-1))/2+i-1

    对称矩阵的压缩存储 策略：只存储在主对角线+下三角区，列优先原则
    三角矩阵的压缩存储：按行优先原则将绿色区(非0)元素存入一维数组中，并在最后一个位置存储常量c
    三对角矩阵(又称带状矩阵):当|i-j|>1时，ai,j=0,一维数组length=3n-2(只有第一行和最后一行是两个，其他都是3个)
    稀疏矩阵：非零元素远远少于矩阵元素的个数，压缩策略1：顺序存储--三元组<行，列，值>; 策略2:十字链表法(向下域和向右域)


    */
}//改天重看p31 12:26 (复习并二刷leetcode Q150，逆波兰表达式求值。做和压缩相关的题!!)
